- name: enable kube node dirs
  file: name={{ item }} state=directory
  with_items:
  - /var/lib/kubelet
  - /var/lib/kube-proxy
  - /etc/cni/net.d

- name: copy kube node tools
  copy: src={{ base_dir }}/bin/{{ item }} dest={{ bin_dir }}/{{ item }} mode=0755
  with_items:
  - kubelet
  - kube-proxy
  - bridge
  - host-local
  - loopback

- name: bind system:node-bootstrapper to kubelet-bootstrap
  shell: "sleep 15 && {{ bin_dir }}/kubectl create clusterrolebinding kubelet-bootstrap \
        --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap"
  when: NODE_ID is defined and NODE_ID == "node1"
  ignore_errors: true

- name: set cluster params
  shell: "{{ bin_dir }}/kubectl config set-cluster kubernetes \
        --certificate-authority={{ ca_dir }}/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
        --kubeconfig=bootstrap.kubeconfig"
- name: set certs params
  shell: "{{ bin_dir }}/kubectl config set-credentials kubelet-bootstrap \
        --token={{ BOOTSTRAP_TOKEN }} \
        --kubeconfig=bootstrap.kubeconfig"
- name: set context params
  shell: "{{ bin_dir }}/kubectl config set-context default \
	--cluster=kubernetes \
	--user=kubelet-bootstrap \
	--kubeconfig=bootstrap.kubeconfig"
- name: set default context params
  shell: "{{ bin_dir }}/kubectl config use-context default --kubeconfig=bootstrap.kubeconfig"

- name: move bootstrap.kubeconfig to proper path
  shell: "mv $HOME/bootstrap.kubeconfig /etc/kubernetes/bootstrap.kubeconfig"

- name: copy default cni configuration
  template: src=cni-default.conf.j2 dest=/etc/cni/net.d/10-default.conf

- name: copy kubelet systemd configuration file
  template: src=kubelet.service.j2 dest=/etc/systemd/system/kubelet.service
  tags: kubelet

- name: start
  shell: systemctl daemon-reload && systemctl enable kubelet && systemctl restart kubelet
  tags: kubelet

- name: approve-kubelet-csr
  shell: "sleep 15 && {{ bin_dir }}/kubectl get csr|grep 'Pending' | awk 'NR>0{print $1}'| xargs {{ bin_dir }}/kubectl certificate approve"
  when: NODE_ID is defined and NODE_ID == "node1"
  ignore_errors: true

- name: copy kube-proxy csr
  template: src=kube-proxy-csr.json.j2 dest={{ ca_dir }}/kube-proxy-csr.json

- name: create kube-proxy certs
  shell: "cd {{ ca_dir }} && {{ bin_dir }}/cfssl gencert \
        -ca={{ ca_dir }}/ca.pem \
        -ca-key={{ ca_dir }}/ca-key.pem \
        -config={{ ca_dir }}/ca-config.json \
        -profile=kubernetes kube-proxy-csr.json | {{ bin_dir }}/cfssljson -bare kube-proxy"

- name: set cluster params
  shell: "{{ bin_dir }}/kubectl config set-cluster kubernetes \
        --certificate-authority={{ ca_dir }}/ca.pem \
        --embed-certs=true \
        --server={{ KUBE_APISERVER }} \
        --kubeconfig=kube-proxy.kubeconfig"
- name: set certs params
  shell: "{{ bin_dir }}/kubectl config set-credentials kube-proxy \
	--client-certificate={{ ca_dir }}/kube-proxy.pem \
	--client-key={{ ca_dir }}/kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig"
- name: set context params
  shell: "{{ bin_dir }}/kubectl config set-context default \
        --cluster=kubernetes \
        --user=kube-proxy \
        --kubeconfig=kube-proxy.kubeconfig"
- name: set default context params
  shell: "{{ bin_dir }}/kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig"

- name: move kube-proxy.kubeconfig to proper path
  shell: "mv $HOME/kube-proxy.kubeconfig /etc/kubernetes/kube-proxy.kubeconfig"

- name: copy kube-proxy systems configuration file
  tags: reload-kube-proxy
  template: src=kube-proxy.service.j2 dest=/etc/systemd/system/kube-proxy.service

- name: start kube-proxy
  tags: reload-kube-proxy
  shell: systemctl daemon-reload && systemctl enable kube-proxy && systemctl restart kube-proxy

